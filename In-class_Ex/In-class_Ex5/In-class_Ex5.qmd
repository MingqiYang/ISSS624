---
title: "In-class Exercise 5"
editor: visual
date: "`r Sys.Date()`"
execute: 
  warning: false
  message: false
---

# Lesson 5: Geographically Weighted Logistic Regression Model

## 1 Overview

To build an explanatory model to discover factor affecting water point status in Osun State, Nigeria

### 1.1 Study area

Osun State, Nigeria

### 1.2 Data sets

Osun.rds, Osun_wp_sf.rds

### 1.3 Model Variables

-   Dependent variable: water point status

-   Independent variables:

-   distance_to_primary_road,

-   distance_to_secondary_road,

-   distance_to_city,

-   distance_to_town,

-   water_point_population,

-   local_population_1km,

-   usage_capacity,

-   is_urban,

-   water_source_clean

## 2 Getting Started

Load the following R packages:

```{r}
pacman::p_load(sf, tidyverse, funModeling, 
               blorr, corrplot, ggpubr, 
               spdep, GWmodel, tmap, skimr, caret)
```

## 3 Data Import

### 3.1 Importing water point data

```{r eval=FALSE}
wp_nga <- read_csv("aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

### 3.2 Importing the analytical data

```{r}
Osun <- read_rds("rds/Osun.rds")
Osun_wp_sf <- read_rds("rds/Osun_wp_sf.rds")
```

```{r}
Osun_wp_sf %>%
  freq(input = 'status')
```

```{r}
tmap_mode("view")
tm_shape(Osun)+
 tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha=0.4)+
tm_shape(Osun_wp_sf)+
  tm_dots(col = "status",
          alpha=0.6)+
  tm_view(set.zoom.limits = c(9,12))
```

## 4 EDA

Summary Statistics with skimr:

```{r}
Osun_wp_sf %>%
  skim()
```

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>%
  filter_at(vars(status,
                 distance_to_primary_road,
                 distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 is_urban,
                 water_source_clean),
            all_vars(!is.na(.))) %>%
  mutate(usage_capacity = as.factor(usage_capacity))
```

## 5 Correlation Analysis

```{r}
Osun_wp <- Osun_wp_sf_clean %>%
  select(c(7,35:39,42:43,46:47,57)) %>%
  st_set_geometry(NULL)
```

```{r}
cluster_vars.cor = cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_vars.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

## 6 Building a Logistic Regression

```{r}
model <- glm(status ~ distance_to_primary_road +
               distance_to_secondary_road +
               distance_to_tertiary_road +
               distance_to_city +
               distance_to_town +
               is_urban +
               usage_capacity +
               water_source_clean +
               water_point_population +
               local_population_1km,
             data = Osun_wp_sf_clean,
             family = binomial(link = 'logit'))
```

Instead of using typical R report, blr_regress() of blorr package is used.

```{r}
blr_regress(model)
```

In the code chunk below, blr_confusion_matrix() of blorr package is used to compute the confusion matrix of the estimated outcomes by using 0.5 as the cutoff value.

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

**New model:**

```{r}
model_new <- glm(status ~ distance_to_tertiary_road +
               distance_to_city +
               distance_to_town +
               is_urban +
               usage_capacity +
               water_source_clean +
               water_point_population +
               local_population_1km,
             data = Osun_wp_sf_clean,
             family = binomial(link = 'logit'))
```

```{r}
blr_regress(model_new)
```

```{r}
blr_confusion_matrix(model_new, cutoff = 0.5)
```

## 7 Building Geographically Weight

### 7.1 Converting from sf to sp data frame

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>%
  select(c(status,
           distance_to_primary_road,
           distance_to_secondary_road,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           water_point_population,
           local_population_1km,
           usage_capacity,
           is_urban,
           water_source_clean)) %>%
  as_Spatial()
Osun_wp_sp
```

### 7.2 Building Fixed Bandwidth GWR Model

Computing fixed bandwidth:

```{r eval=FALSE}
bw.fixed <- bw.ggwr(status ~ 
                      distance_to_primary_road +
                       distance_to_secondary_road +
                       distance_to_tertiary_road +
                       distance_to_city +
                       distance_to_town +
                       is_urban +
                       usage_capacity +
                       water_source_clean +
                       water_point_population +
                       local_population_1km,
                    data = Osun_wp_sp,
                    family = "binomial",
                    approach = "AIC",
                    kernel = "gaussian",
                    adaptive = FALSE,
                    longlat = FALSE)
```

```{r eval=FALSE}
bw.fixed
```

```{r}
gwlr.fixed <- ggwr.basic(status ~ 
                      distance_to_primary_road +
                       distance_to_secondary_road +
                       distance_to_tertiary_road +
                       distance_to_city +
                       distance_to_town +
                       is_urban +
                       usage_capacity +
                       water_source_clean +
                       water_point_population +
                       local_population_1km,
                      data = Osun_wp_sp,
                      bw = 2599.672,
                      family = "binomial",
                      kernel = "gaussian",
                      adaptive = FALSE,
                      longlat = FALSE)
```

```{r}
gwlr.fixed
```

**New model:**

```{r eval=FALSE}
bw.fixed_new <- bw.ggwr(status ~ 
                       distance_to_tertiary_road +
                       distance_to_city +
                       distance_to_town +
                       is_urban +
                       usage_capacity +
                       water_source_clean +
                       water_point_population +
                       local_population_1km,
                    data = Osun_wp_sp,
                    family = "binomial",
                    approach = "AIC",
                    kernel = "gaussian",
                    adaptive = FALSE,
                    longlat = FALSE)
```

```{r eval=FALSE}
bw.fixed_new
```

```{r}
gwlr.fixed_new <- ggwr.basic(status ~ 
                       distance_to_tertiary_road +
                       distance_to_city +
                       distance_to_town +
                       is_urban +
                       usage_capacity +
                       water_source_clean +
                       water_point_population +
                       local_population_1km,
                      data = Osun_wp_sp,
                      bw = 2377.371,
                      family = "binomial",
                      kernel = "gaussian",
                      adaptive = FALSE,
                      longlat = FALSE)
```

```{r}
gwlr.fixed_new
```

### 7.3 Model Assessment

#### 7.3.1 Converting SDF into sf data.frame

To assess the performance of the gwLR, firstly, we will convert the SDF object in as data frame by using the code chunk below.

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

New model:

```{r}
gwr.fixed_new <- as.data.frame(gwlr.fixed_new$SDF)
```

Next, we will label yhat values greater or equal to 0.5 into 1 and else 0. The result of the logic comparison operation will be saved into a field called most.

```{r}
gwr.fixed <- gwr.fixed %>%
  mutate(most = ifelse(
    gwr.fixed$yhat >= 0.5,T,F))
```

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
CM <- confusionMatrix(data=gwr.fixed$most, reference=gwr.fixed$y)
CM
```

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>%
  select(c(ADM2_EN, ADM2_PCODE,
           ADM1_EN, ADM1_PCODE,
           status))
```

```{r}
gwr_sf.fixed <- cbind(Osun_wp_sf_selected,gwr.fixed)
```

New model:

```{r}
gwr.fixed_new <- gwr.fixed_new %>%
  mutate(most = ifelse(
    gwr.fixed_new$yhat >= 0.5,T,F))

gwr.fixed_new$y <- as.factor(gwr.fixed_new$y)
gwr.fixed_new$most <- as.factor(gwr.fixed_new$most)
CM_new <- confusionMatrix(data=gwr.fixed_new$most, reference=gwr.fixed_new$y)
CM_new
```

```{r}
gwr_sf.fixed_new <- cbind(Osun_wp_sf_selected,gwr.fixed_new)
```

### 7.4 Visualising gwLR

Visualising coefficient estimates:

```{r}
tmap_mode("view")
prob_T <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf.fixed) + 
  tm_dots(col = "yhat",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))
prob_T
```

```{r}
tertiary_TV <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf.fixed) +
  tm_dots(col = "distance_to_tertiary_road_TV",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))

tertiary_SE <- tm_shape(Osun) +
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf.fixed) +
  tm_dots(col = "distance_to_tertiary_road_SE",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(8,14))

tmap_arrange(tertiary_SE,tertiary_TV,asp = 1,ncol = 2,sync = TRUE)
```
