---
title: "In-class Exercise 1"
editor: visual
---

# Chapter 3: Spatial Weights and Applications

## 1 Overview

Learn how to compute spatial weights using R.

## 2 Getting Started

The code chunk below will install and load tidyverse and sf packages.

```{r}
pacman::p_load('sf', 'tmap', 'tidyverse', 'spdep')
```

## 3 Getting the Data into R Environment

### 3.1 Importing shapefile into r environment

This code chunk will import shapefile into R.

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

### 3.2 Importing csv file into r environment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### 3.3 Performing relational join

```{r}
hunan <- left_join(hunan,hunan2012)
```

## 4 Visualizing Regional Development Indicator

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 5 Computing Contiguity Spatial Weights

### 5.1 Computing (QUEEN) contiguity based neighbours

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

We can retrive the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

To reveal the county names of the five neighboring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

We can retrieve the GDPPC of these five countries by using the code chunk below:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen\'s method are 20981, 34592, 24473, 21311 and 22879 respectively.

We can display the complete weight matrix by using *str()*:

```{r}
str(wm_q)
```

### 5.2 Creating (ROOK) contiguity based neighbours

The code chunk below is used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The summary report above shows that there are 88 area units in Hunan. The most connect area unit has 10 neighbours. There are two area units with only one heighbours.

### 5.3 Visualising contiguity weights

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

We check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

#### 5.3.1 Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### 5.3.2 Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### 5.3.3 Plotting both Queen and Rook contiguity based neighbours maps

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```

## 6 Computing Distance Based Neighbours

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.

### 6.1 Determine the cut-off distance

Firstly, determine the upper limit for distance band:

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### 6.2 Computing fixed distance weight matrix

Compute the distance weight matrix by using dnearneigh():

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Use str() to display the content of wm_d62 weight matrix:

```{r}
str(wm_d62)
```

Display the structure of the weight matrix by combing table() and card() of spdep:

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### 6.2.1 Plotting fixed distance weight matrix

Plot the distance weight matrix:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, we can plot both of them next to each other by using the code chunk below:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

### 6.3 Computing adaptive distance weight matrix

Control the numbers of neighbours using k-nearest neighbours, imposing symmetry:

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

Display the content of the matrix by using str():

```{r}
str(knn6)
```

#### 6.3.1 Plotting distance based neighbours

Plot the weight matrix:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 7 Weights Based on IDW

This section contains how to derive a spatial weight matrix based on **Inversed Distance Method**.

Compute the distances between areas:

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### 7.1 Row-standardised weights matrix

Assign weights to each neighboring polygon:

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

The weight of the first polygon's four neighbours type:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor's income will be multiplied by 0.2 before being tallied.

Derive a row standardised distance weight matrix:

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 8 Application of Spatial Weight Matrix

This section contains how to create four different spatial lagged variables.

### 8.1 Spatial lag with row-standardised weights

Compute the average neighbour GDPPC value for each polygon (these values are often referred to as spatially lagged values):

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

Retrieve the GDPPC of these five countries:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Append the spatially lag GDPPC values onto hunan sf data frame:

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The average neighbouring income values for each country:

```{r}
head(hunan)
```

Plot both the GDPPC and spatial lag GDPPC for comparison:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 8.2 Spatial lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Examine the result:

```{r}
lag_sum
```

Append the lag_sum GDPPC field into hunan sf data frame:

```{r}
hunan <- left_join(hunan, lag.res)
```

Plot both the GDPPC and Spatial Lag Sum GDPPC for comparison:

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 8.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights. To begin we assign k6 to a new variable because we will directly alter its structure to add the diagonal elements.

```{r}
wm_q1 <- wm_q
```

Add the diagonal element to the neighbour list:

```{r}
include.self(wm_q1)
```

Obtain weights with nb2listw():

```{r}
wm_q1 <- nb2listw(wm_q1)
wm_q1
```

Create the lag variable from our weight structure and GDPPC variable:

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_q1, hunan$GDPPC)
lag_w_avg_gpdpc
```

Convert the lag variable listw object into a data.frame by using as.data.frame():

```{r}
lag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))
lag_wm_q1.res <- as.data.frame(lag.list.wm_q1)
colnames(lag_wm_q1.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.

Append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package:

```{r}
hunan <- left_join(hunan, lag_wm_q1.res)
```

Plot the GDPPC and lag_window_avg GDPPC map next to each other for quick comparison:

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)
```

**( Note: For more effective comparison, it is advisable to use the core tmap mapping functions. )**

### 8.4 Spatial window sum

Assign binary weights to the neighbor structure that includes the diagonal element:

```{r}
wm_q1 <- wm_q
```

Add the diagonal element to the neighbour list:

```{r}
include.self(wm_q1)
```

```{r}
wm_q1
```

Assign binary weights to the neighbour structure that includes the diagonal element:

```{r}
b_weights <- lapply(wm_q1, function(x) 0*x + 1)
b_weights[1]
```

Use nb2listw() and glist() to explicitly assign weight values:

```{r}
b_weights2 <- nb2listw(wm_q1, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Compute the lag variable with lag.listw():

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

Convert the lag variable listw object into a data.frame by using as.data.frame():

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

**Note: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.**

Append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package:

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Plot the GDPPC and lag_sum GDPPC map next to each other for quick comparison:\

```{r}
gdppc <- qtm(hunan, "GDPPC")
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)
```

**Note: For more effective comparison, it is advicible to use the core tmap mapping functions.**

